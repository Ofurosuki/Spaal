def detect_echo(signal: npt.NDArray[np.float64], max_height: float = 9.0, thd_factor: float = 1.0, use_height_estimation: bool = False, pulse_half_width_ns: int = 10, show_plot: bool = False) -> list[Echo]:
    # ----------------------- パラメータ計算 -----------------------
    # ヒストグラムの平均値B1
    b_one = float(np.mean(signal))

    # エコー判定閾値
    echo_judgment_threshold1 = b_one + (max_height/2 - b_one * 0.5) * thd_factor # b_one * 0.5 + max_height * 0.5
    echo_judgment_threshold2 = b_one + np.sqrt(b_one * (max_height - b_one)) * thd_factor

    # 判定閾値を切り替えるサンプル位置
    echo_judgement_position = 100

    # エコー検出閾値
    echo_detection_threshold = b_one

    # エコー幅閾値
    echo_width_threshold = 0

    # 谷判定閾値
    valley_threshold = 1 # 10

    if show_plot:
        plt.figure(figsize=(12, 4))
        plt.cla()
        plt.plot(signal, color='blue')

        plt.hlines(y=echo_judgment_threshold1, xmin=0, xmax=echo_judgement_position, color='red', linestyle='--')
        plt.hlines(y=echo_judgment_threshold2, xmin=echo_judgement_position, xmax=len(signal), color='red', linestyle='--')
        # plt.axhline(y=echo_detection_threshold, color='red', linestyle='--')
        # plt.axvline(x=echo_judgement_position, color='red', linestyle='--')

    # ----------------------- エコー検出 -----------------------
    # ピーク検出
    peaks_global = np.hstack([
        find_peaks(signal[:echo_judgement_position], height=echo_judgment_threshold1)[0],
        find_peaks(signal[echo_judgement_position:], height=echo_judgment_threshold2)[0] + echo_judgement_position
    ])
    peaks_binary = np.zeros_like(signal)
    peaks_binary[peaks_global] = signal[peaks_global]

    if show_plot:
        plt.scatter(peaks_global, peaks_binary[peaks_global], color='green')

    # エコー検出閾値以上の連続するサンプル位置を取得
    raises = np.flatnonzero(
        (signal[:-1] < echo_detection_threshold) & (signal[1:] >= echo_detection_threshold)
    ) + 1
    falls = np.flatnonzero(
        (signal[:-1] >= echo_detection_threshold) & (signal[1:] < echo_detection_threshold)
    ) + 1
    if len(raises) == 0 and len(falls) == 0:
        return [] # エコーが検出されなかった場合
    elif len(raises) == 0 or raises[0] > falls[0]:
        raises = np.insert(raises, 0, 0)
    elif len(falls) == 0 or raises[-1] > falls[-1]:
        falls = np.append(falls, len(signal) - 1)
    
    effective_echoes: list[Echo] = []
    for echo_start, echo_end in zip(raises, falls):
        sig_echo = signal[echo_start:echo_end]

        if show_plot:
            plt.hlines(y=echo_detection_threshold, xmin=echo_start, xmax=echo_end, color='green', linestyle='--')

        # エコー内のピーク位置を取得
        peaks_local = np.flatnonzero(peaks_binary[echo_start:echo_end])
        if len(peaks_local) == 0:
            continue

        # 谷が存在したらエコーを分割
        split_positions = []
        for i in range(len(peaks_local)-1):
            if sig_echo[peaks_local[i+1]] - np.min(sig_echo[peaks_local[i]:peaks_local[i+1]]) > valley_threshold:
                split_positions.append(np.argmin(sig_echo[peaks_local[i]:peaks_local[i+1]]) + peaks_local[i])
                if show_plot:
                    plt.axvline(x=split_positions[-1]+echo_start, color='purple', linestyle='--')
        candidate_echo_range_list = []
        if len(split_positions) == 0:
            candidate_echo_range_list.append((0, len(sig_echo)))
        else:
            split_positions = [0] + split_positions + [len(sig_echo)]
            for i in range(len(split_positions)-1):
                candidate_echo_range_list.append((split_positions[i],split_positions[i+1]))

        for c_echo_start, c_echo_end in candidate_echo_range_list:
            peaks_range = peaks_binary[echo_start+c_echo_start:echo_start+c_echo_end]
            peak_position = int(np.argmax(peaks_range) + echo_start + c_echo_start)
            peak_height = signal[peak_position]
            width = c_echo_end - c_echo_start
            if width >= echo_width_threshold:
                effective_echoes.append(Echo(peak_position, peak_height, width, signal[echo_start+c_echo_start:echo_start+c_echo_end]))

            if show_plot:
                plt.hlines(y=echo_detection_threshold+0.5, xmin=echo_start+c_echo_start, xmax=echo_start+c_echo_end, color='orange', linestyle='--')
                plt.scatter(peak_position, peak_height + 0.1, color='orange')

    if show_plot:
        plt.show()

    if use_height_estimation:
        for echo in effective_echoes:
            if echo.peak_height < max_height - 0.1:
                continue
            thd = max_height - 0.1
            half_width_ns = pulse_half_width_ns
            sigma = half_width_ns / (2 * np.sqrt(2 * np.log2(2)))
            start = np.argmax(echo.signal > thd)
            end = len(echo.signal) - np.argmax(echo.signal[::-1] > thd)
            if np.sum(echo.signal[start:end] > thd) / (end - start) < 0.8:
                continue
            saturation_width = end - start

            estimated_height = thd / np.exp( - ((saturation_width / 2) ** 2) / (2 * sigma ** 2))

            echo.peak_height = estimated_height

    return effective_echoes